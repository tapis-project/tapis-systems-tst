TapisV3 Systems Web Application Notes
=======================================

------------
Introduction
------------
This is the TapisV3 Systems web application front end. It was adapted from the skeleton web service found at tapis-java/tapis-sampleapi.

It integrates the following facilities:

    1. JAX-RS to implement REST endpoints.
    2. JAX-RS and servlet filters.
    3. (Obsolete) Swagger to generate openapi json and yaml dynamically and at compile time.
      http://localhost:8080/v3/systems/openapi.json
      http://localhost:8080/v3/systems/openapi.yaml
    4. (Obsolete) Swagger-ui integration for serving up generated openapi schema.
      http://localhost:8080/systems/swagger-ui
    5. Logback for logging.
    6. Buildnumber maven plugin to capture git information at compile time.
    7. Flyway to create database schema.
    8. Hikari for database connection pooling.
    9. io.jsonwebtoken for JWT processing.
   10. Aloe support for parameter parsing, email clients, threadlocal management,
       UUIDs, etc.

The back end may be found in the lib directory

NOTE: As of 6 Aug 2020 the OpenAPI spec is being manually maintained at tapis-systemsapi/src/main/resources/SystemsAPI.yaml
NOTE: As of 16 Sep 2020 the OpenAPI spec has been moved to tapis-client-java repo at systems-client/SystemsAPI.yaml
      This was done to help prevent tapis-client-java builds from breaking. May not be final solution.

-----------------------------
Initialize the Database
-----------------------------
Current process to create and drop the DB is to use the sql directly.
SQL files are in tapis-systemslib/src/main/resources/sql.
First create the user "tapis_sys" From then on DB can be reset as follows:
psql -h localhost -U tapis -d tapissysdb -q -f tapis-systemslib/src/main/resources/sql/drop.sql
psql -h localhost -U tapis -d tapissysdb -q -f tapis-systemslib/src/main/resources/sql/V001__init.sql


------------
ENUMs
------------
In general enumeration defintions may exist in up to three places
  - In the JsonSchema file that validates incoming requests.
  - In the model class representing the object (e.g. edu.utexas.tacc.tapis.systems.model.TSystem, Capability)
  - In the sql initializing the DB schema.
Here are the current enumerations and the locations where they are defined. Note that this list may not be up to date.
  Enumeration         Json Schema               Model class       Init SQL
  ===========         ================          ==============    =============
  SystemType          Definitions.json          model.TSystem     Yes
  SystemOperation     <N/A>                     model.TSystem     Yes
  Permission          PermsRequest.json         model.TSystem     No
  AuthnMethod        Definitions.json          model.TSystem     Yes
  TransferMethod      SystemCreateRequest.json  model.TSystem     No
  Capability          Definitions.json          model.Capability  Yes

------------
Server Usage
------------
Web applications can be controlled using these environment variables:

TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS - allow test-only values sent as query parameters
TAPIS_ENVONLY_JWT_OPTIONAL - set to true to skip jwt processing
TAPIS_ENVONLY_KEYSTORE_PASSWORD - password to unlock jwt private signing key
TAPIS_ENVONLY_SKIP_JWT_VERIFY - set to true to skip jwt signature verification
TAPIS_REQUEST_LOGGING_FILTER_PREFIXES - set url prefixes that log each request
TAPIS_SVC_URL_TENANTS - Base URL for Tenants service
TAPIS_SVC_URL_TOKENS - Base URL for Tokens service
TAPIS_SVC_URL_SK - Base URL for Security Kernel service

See the TapisEnv class for an explanation of how to use these parameters and for the
complete listing of all possible Tapis parameters.  For example, to not require a jwt
in a request and to log all requests, set the following parameters when starting the 
server:
 
        TAPIS_ENVONLY_JWT_OPTIONAL = true
        TAPIS_REQUEST_LOGGING_FILTER_PREFIXES = /v3/systems.
        
Note that if jwt content is required to execute requests, that information can be passed 
in request query parameters when TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS = true.

Note that TAPIS_SVC_URL_TENANTS is required either in service.properties or in the environment.
The other base service URLs are optional and by default are looked up using the Tenants service.

The web application is packaged as a WAR file.  Configure your web application
server, such as Tomcat, with the systems.war file.  Start your web application server
after setting the above environment variables to control the web application.

------------
Client Usage
------------
*** From Browser, enter these urls to hit application endpoints:

- Run GET on healthcheck and readycheck methods
    http://localhost:8080/v3/systems/healthcheck
    http://localhost:8080/v3/systems/readycheck
    

------------------------------------------------------------------------------
NOTE: Obsolete
Generating and viewing openapi spec
NOTE: As of 6 Aug 2020 the OpenAPI spec is being manually maintained at tapis-systemsapi/src/main/resources/SystemsAPI.yaml
NOTE: As of 16 Sep 2020 the OpenAPI spec has been moved to tapis-client-java repo at systems-client/SystemsAPI.yaml
      This was done to help prevent tapis-client-java builds from breaking. May not be final solution.
------------------------------------------------------------------------------
*** From Browser, enter these urls to generate the openapi definition
http://localhost:8080/v3/systems/openapi.json
http://localhost:8080/v3/systems/openapi.yaml
*** From Browser, enter this url to view the definition via swagger-ui
http://localhost:8080/systems/swagger-ui

-------------------------------------------------------------------
Creating a run configuration for the front end server in IntelliJ
-------------------------------------------------------------------
Configure Run configuration in IntelliJ
  Run->Edit Configurations
  Click "+" and select Tomcat Server->Local
  On Server tab:
    Uncheck "Open browser" if desired
  On Deployment tab:
    Click "+" and select "tapis-systemsapi:war"
    Edit "Application context:" to be "/"
  On Startup/Connection tab:
    For "Run" and "Debug" add following Environment Variables
      Name                                  Value
      ---------------------------------------------
      TAPIS_ENVONLY_ALLOW_TEST_QUERY_PARMS  TRUE
      TAPIS_ENVONLY_JWT_OPTIONAL            TRUE
      TAPIS_ENVONLY_SKIP_JWT_VERIFY         TRUE
      TAPIS_REQUEST_LOGGING_FILTER_PREFIXES /v3/systems

------------------------------------------------------------------------------
Updating OpenAPI spec published to live-docs
NOTE: As of 6 Aug 2020 the OpenAPI spec is being manually maintained at tapis-systemsapi/src/main/resources/SystemsAPI.yaml
      See note at top of SystemsResource.java
NOTE: As of 16 Sep 2020 the OpenAPI spec has been moved to tapis-client-java repo at systems-client/SystemsAPI.yaml
      This was done to help prevent tapis-client-java builds from breaking. May not be final solution.
------------------------------------------------------------------------------
OBSOLETE
1. cd tapis-java; mvn clean install
2. Copy entire contents of file tapis-java/tapis-systemsapi/src/main/resources/openapi.json into clipboard.
3. Visit https://editor.swagger.io
4. Replace contents with clipboard, convert from JSON to YAML.
5. Check display to see if all looks correct.
6. Copy swagger editor generated yaml to clipboard.
NOTE: Here is one way that works fairly well for 7 and 8:
    cp tapis-client-java/systems-client/SystemsAPI.yaml ~/SystemsAPI.yaml
    Then update tapis-client-java/systems-client/SystemsAPI.yaml
    now use: meld ~/SystemsAPI.yaml tapis-client-java/systems-client/SystemsAPI.yaml
      to update paths. Note that sometimes info in the components section gets moved
      around but that should be OK.
7. Paste clipboard to tapis-client-java/systems-client/SystemsAPI.yaml.
8. Edit SystemsAPI.yaml to update all paths to begin with '/v3/systems'
   Note: all paths should be surrounded by single quotes. Some paths have them and some do not.
   Note: At this point tapis-client-java can be built and used for local testing.
         Might first need to clean mvn repo: rm -fr ~/.m2/repository/edu/utexas/tacc/tapis/*-client*
         Then to build and install locally: cd tapis-client-java; mvn clean install
         Start tapis-java systems service from IDE Run SystemsClientTest
           and run SystemsClientTest using env var TAPIS_SVC_URL_SYSTEMS=http://localhost:8080
9. Push tapis-client-java to main branch.
10. Updates should be reflected in live-docs (https://tapis-project.github.io/live-docs/)
      within a few minutes.

------------------------------------------------------------------------------
Updating Systems server running in k8s dev environment
------------------------------------------------------------------------------
1. (optional) Wipe out DB. Reset by running drop and init sql against postgres running in k8s dev.
psql --host=c005.rodeo.tacc.utexas.edu --port 31236 --username=tapis --dbname=tapissysdb -q -f tapis-systemslib/src/main/resources/sql/drop.sql
psql --host=c005.rodeo.tacc.utexas.edu --port 31236 --username=tapis --dbname=tapissysdb -q -f tapis-systemslib/src/main/resources/sql/V001__init.sql
  NOTE: c005 url above appears to be for a postgres installed by scblack for dev, it is not the official dev systems dB
    Login to pgadmin at http://c002.rodeo.tacc.utexas.edu:31114/browser/ to run the scripts, username=wow@example.com, see Mike P for password.

2. Run jenkins job to build and push latest docker image
   Tapis jobs -> DEV -> Systems-DEV-Build-Test-Publish-Images

3. Run jenkins job to re-deploy k8s service
   Tapis jobs -> DEV -> Systems-Deploy-DEV
   NOTE: Might need to wait a bit for docker image to be refreshed. At least once it appeared to take a few minutes.

4. If changes impact tapis-client-java, then update and test client. Then run
   Tapis jobs -> DEV -> Client-Java-Build-Publish
